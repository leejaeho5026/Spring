

ViewResolver

=> Controller에서 전달받은 View의 이름 (Controller클래스의 메소드의 return 값)을 기반으로
=> jsp파일을 찾아서 선택하고 jsp 데이터를 분석해서 응답결과를 만들어서 전달함

ViewResolver가 사용하는 View의 이름을 지정하는 방법
=> jsp를 통해서 응답결과를 만들 때 필요한 data를 전달하는 방법

HttpServletRequest => Spring MVC가 jsp를 처리할 때 HttpServletRequest 객체를(자동으로 생성해서) jsp로 전달함
ViewResolver는 이것을 이용해서 jsp 작업시 data를 사용함


1) 웹 브라우저 주소표시줄에 /test1이 표시되면 <= 요청 정보 (Request)
2) DispatcharServlet이 요청정보를 받아서 분석해서 Controller를 선택한다.
3) @GetMapping("/test1")이 있는 메소드를 호출함
4) 이 메소드의 return 값으로 지정된 이름의 jsp파일(View)을 선택함
5) 이 정보를 ViewResolver가 받아서 해당 jsp파일에 있는 java code, EL, JSTL 등을  모두 실행시킨다.
6) 이 결과를 다시 DispatcherServlet으로 전달함
7) 여기서 생성된 정보(html)를 Client로 보내면 ( Response)
8) Client의 Web browser가 이를 rendering해서 화면으로 보여줌


HttpServletRequest 객체를 주입 받는 방법
=> public String test2(HttpServletRequest request)
=> request.setAttribute("변수", 값)
=> jsp에서는 <h3> number1: ${requestScope.number1}</h3> 받는다

Model 객체를 주입 받는 방법
=> public String test3(Model model)
=> Model 객체를 주입 받으면 HttpServletRequest 객체에 담아져서 jsp에 전달할 수 있다.
=> model.addAttribute("변수",값)
=> jsp에서는 <h3> number1: ${requestScope.number1}</h3> 받는다

ModelAndView 객체 주입 받는 방법
=> public String test4(ModelAndView mv)
=> ModelAndView는 Model에 값을 설정하고, View의 이름을 지정까지 할 수 있음
=> test4 메소드는 View의 이름을 return하지 않고 ModelAndView객체를 return 함
=> mv.addObject("변수",값)
=> mv.setViewName("View 이름")




